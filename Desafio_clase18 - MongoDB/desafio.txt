# 0) Crear Base de Datos "ecommerce"
# Crear Colecciones: Mensajes y Productos

use ecommerce

# 1) Agregar 10 documentos con valores distintos a las colecciones mensajes y productos. El formato de los documentos debe estar en correspondencia con el que venimos utilizando en el entregable con base de datos MariaDB.

db.mensajes.insertMany([
    {email:"user1@gmail.com", text:"Hola?", time:ISODate()},
    {email:"user2@gmail.com", text:"Hola, como estas?", time:ISODate()},
    {email:"user1@gmail.com", text:"Muy bien, gracias", time:ISODate()},
    {email:"user3@gmail.com", text:"Hola!", time:ISODate()},
    {email:"user2@gmail.com", text:"Como va?", time:ISODate()},
    {email:"user1@gmail.com", text:"Quiero preguntar por las ofertas", time:ISODate()},
    {email:"user3@gmail.com", text:"Tambien quisiera preguntar!", time:ISODate()},
    {email:"user1@gmail.com", text:"Cuando empiezan?", time:ISODate()},
    {email:"user2@gmail.com", text:"Empiezan muy pronto jaja", time:ISODate()},
    {email:"user3@gmail.com", text:"??", time:ISODate()},
])

# 2) Definir las claves de los documentos en relación a los campos de las tablas de esa base. En el caso de los productos, poner valores al campo precio entre los 100 y 5000 pesos(eligiendo valores intermedios, ej: 120, 580, 900, 1280, 1700, 2300, 2860, 3350, 4320, 4990).

db.productos.insertMany([
    {title:"Monitor", price:3600},
    {title:"Teclado", price:1600},
    {title:"Teclado", price:1600},
    {title:"Parlantes", price:925},
    {title:"Auriculares", price:690},
    {title:"Microfono", price:125},
    {title:"Joystick", price:1250},
    {title:"GPU", price:4800},
    {title:"CPU", price:4150},
    {title:"SSD", price:3480}
])

# 3) Listar todos los documentos en cada colección.

db.mensajes.find()
db.productos.find()

# 4) Mostrar la cantidad de documentos almacenados en cada una de ellas.

db.mensajes.estimatedDocumentCount()
db.productos.estimatedDocumentCount()

# 5) Realizar un CRUD sobre la colección de productos:
#   a) Agregar un producto más en la colección de productos
        db.productos.insertOne({title:"RTX 4090", price:4950})
#   b) Realizar una consulta por nombre de producto específico:
#       I) Listar los productos con precio menor a 1000 pesos.
            db.productos.find({"price":{$lt: 1000}})
#       II) Listar los productos con precio entre los 1000 a 3000 pesos.
            db.productos.find({$and:[{"price":{$gt: 1000}},{"price":{$lt: 3000}}]})
#       III) Listar los productos con precio mayor a 3000 pesos.
            db.productos.find({"price":{$gt: 3000}})
#       IV) Realizar una consulta que traiga sólo el nombre del tercer producto más barato.
            db.productos.find().sort({"price":1}).limit(1).skip(2)
#   c)  Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.
        db.productos.updateMany({},{$set:{"Stock": 100}})
#   d) Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.
        db.productos.updateMany({"price":{$gt:4000}},{$set:{"Stock": 0}})
#   e) Borrar los productos con precio menor a 1000 pesos.
        db.productos.deleteMany({"price":{$lt:1000} })

# 6) Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce. Verificar que pepe no pueda cambiar la información.

use admin
db.createUser({
        user:"pepe",
        pwd:"asd456",
        roles:[
            {role:"read",
            db:"ecommerce"}
        ]
    })

# Levanto el Servidor: mongod --auth --dbpath "C:\Program Files\MongoDB\Server\6.0\data"
# Entro a Mongo Shell: mongosh -u pepe -p asd456

# Confirmo si puede leer:
db.productos.find()

# Confirmo si puede eliminar un producto:
db.productos.deleteOne({title:"Monitor"})